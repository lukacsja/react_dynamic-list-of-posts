{"version":3,"sources":["types/Errors.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/apiActions.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Errors","PostsList","selectedUsersPosts","selectPost","deSelectPost","selectedPost","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","NewCommentForm","extendComments","useState","isFormSubmitting","setIsFormSubmitting","authorsName","setAuthorsName","authorsEmail","setAuthorsEmail","commentText","setCommentText","hasErrorOnSubmit","setHasErrorOnSubmit","hasNameError","length","hasEmailError","hasCommentError","hasFormError","submitForm","event","preventDefault","commentToPost","name","email","finally","onSubmit","htmlFor","placeholder","cn","value","onChange","target","PostDetails","isLoadingComments","comments","ErrorMessage","isFormVisible","toggleCommentForm","deleteCommentFromState","handleSetComments","deleteComment","commentId","deleteComments","commentsFromServer","CommentApi","comment","href","UserSelector","users","selectedUser","isDropDownActive","toggleDropDown","selectDropDownItem","selectedUserId","closeDropDown","dropdownRef","setDropdownRef","useEffect","handleClickOutside","contains","window","addEventListener","removeEventListener","ref","role","user","App","setUsers","setSelectedUser","setSelectedUserId","setIsDropDownActive","setSelectedUsersPosts","isLoadingPosts","setIsLoadingPosts","noError","errorMessage","setErrorMessage","setIsLoadingComments","setComments","setSelectedPost","setIsFormVisible","usersFromServer","catch","UserApi","userId","postsFromServer","PostApi","classNames","commendId","filter","commentsToPull","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5959a448.chunk.js","sourcesContent":["export enum Errors {\n  noError = '',\n  UserApi = 'Something went wrong',\n  PostApi = 'Something went wrong',\n  CommentApi = 'Something went wrong',\n}\n","import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUsersPosts: Post[],\n  selectPost: (post: Post) => void,\n  deSelectPost: () => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUsersPosts,\n  selectPost,\n  deSelectPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {selectedUsersPosts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost?.id === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={deSelectPost}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => selectPost(post)}\n                  >\n                    Open\n                  </button>\n                )}\n\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComments = (commentToPost: Comment) => {\n  return client.post<Comment>('/comments', commentToPost);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import cn from 'classnames';\nimport React, { useState } from 'react';\n\nimport { postComments } from '../api/apiActions';\n\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null,\n  extendComments: (commentToPost: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  extendComments,\n}) => {\n  const [isFormSubmitting, setIsFormSubmitting] = useState(false);\n  const [authorsName, setAuthorsName] = useState('');\n  const [authorsEmail, setAuthorsEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [hasErrorOnSubmit, setHasErrorOnSubmit] = useState(false);\n\n  const hasNameError = !authorsName.length && hasErrorOnSubmit;\n  const hasEmailError = !authorsEmail.length && hasErrorOnSubmit;\n  const hasCommentError = !commentText.length && hasErrorOnSubmit;\n\n  const hasFormError = !authorsName.length\n    || !authorsEmail.length\n    || !commentText.length;\n\n  const clearForm = () => {\n    setAuthorsName('');\n    setAuthorsEmail('');\n    setCommentText('');\n    setHasErrorOnSubmit(false);\n  };\n\n  const submitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!hasFormError && selectedPost) {\n      setIsFormSubmitting(true);\n\n      const commentToPost: Comment = {\n        id: 0,\n        postId: selectedPost.id,\n        name: authorsName,\n        email: authorsEmail,\n        body: commentText,\n      };\n\n      postComments(commentToPost)\n        .then(() => {\n          extendComments(commentToPost);\n          setCommentText('');\n        })\n        .finally(() => {\n          setIsFormSubmitting(false);\n          setHasErrorOnSubmit(false);\n        });\n    } else if (hasFormError) {\n      setHasErrorOnSubmit(true);\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => submitForm(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': hasNameError },\n            )}\n            value={authorsName}\n            onChange={(event) => setAuthorsName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && hasErrorOnSubmit && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {hasNameError && hasErrorOnSubmit && (\n          <p\n            className={cn(\n              'help',\n              { 'is-danger': hasNameError },\n            )}\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={authorsEmail}\n            className={cn(\n              'input',\n              { 'is-danger': hasEmailError },\n            )}\n            onChange={(event) => setAuthorsEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {hasEmailError && hasErrorOnSubmit && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {hasEmailError && hasErrorOnSubmit && (\n          <p\n            className={cn(\n              'help',\n              { 'is-danger': hasEmailError },\n            )}\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={commentText}\n            className={cn(\n              'input',\n              { 'is-danger': hasCommentError },\n            )}\n            onChange={(event) => setCommentText(event.target.value)}\n          />\n        </div>\n        {hasCommentError && hasErrorOnSubmit && (\n          <p\n            className={cn(\n              'help',\n              { 'is-danger': hasCommentError },\n            )}\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': isFormSubmitting },\n            )}\n          >\n            Add\n          </button>\n        </div>\n        {!isFormSubmitting && (\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={clearForm}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { Post } from '../types/Post';\nimport { Errors } from '../types/Errors';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComments, getComments } from '../api/apiActions';\n\ntype Props = {\n  isLoadingComments: boolean,\n  comments: Comment[] | null,\n  selectedPost: Post | null,\n  ErrorMessage: Errors,\n  isFormVisible: boolean,\n  toggleCommentForm: () => void,\n  extendComments: (commentToPost: Comment) => void,\n  deleteCommentFromState: (commentId: number) => void,\n  handleSetComments: (comments: Comment[]) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isLoadingComments,\n  comments,\n  selectedPost,\n  ErrorMessage,\n  isFormVisible,\n  toggleCommentForm,\n  extendComments,\n  deleteCommentFromState,\n  handleSetComments,\n}) => {\n  const deleteComment = (commentId: number) => {\n    if (selectedPost) {\n      deleteCommentFromState(commentId);\n      deleteComments(commentId)\n        .then(() => {\n          getComments(selectedPost.id)\n            .then(commentsFromServer => {\n              handleSetComments(commentsFromServer);\n            });\n        });\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {ErrorMessage === Errors.CommentApi && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {Errors.CommentApi}\n            </div>\n          )}\n\n          {!comments?.length\n            && !isLoadingComments\n            && !ErrorMessage.length\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n          <p className=\"title is-4\">Comments:</p>\n          {comments?.map(comment => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n\n          ))}\n          {!isFormVisible\n            && !isLoadingComments\n            && !ErrorMessage.length\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={toggleCommentForm}\n              >\n                Write a comment\n              </button>\n            )}\n\n        </div>\n        {isFormVisible && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            extendComments={extendComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  isDropDownActive: boolean,\n  toggleDropDown: () => void,\n  selectDropDownItem: (user: User, userId: number) => void,\n  selectedUserId: number,\n  closeDropDown: () => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  isDropDownActive,\n  toggleDropDown,\n  selectDropDownItem,\n  selectedUserId,\n  closeDropDown,\n}) => {\n  const [dropdownRef, setDropdownRef] = useState<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef && !dropdownRef.contains(event.target as Node)) {\n        closeDropDown();\n      }\n    };\n\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [dropdownRef]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': isDropDownActive },\n      )}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        ref={setDropdownRef}\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropDown}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': selectedUserId === user.id },\n              )}\n              onClick={(event) => {\n                event.preventDefault();\n                selectDropDownItem(user, user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Errors } from './types/Errors';\nimport { Comment } from './types/Comment';\n\nimport {\n  getComments,\n  getPosts,\n  getUsers,\n} from './api/apiActions';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isDropDownActive, setIsDropDownActive] = useState(false);\n  const [selectedUsersPosts, setSelectedUsersPosts] = useState<Post[]>([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<Errors>(Errors.noError);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const toggleDropDown = () => {\n    setIsDropDownActive(!isDropDownActive);\n  };\n\n  const closeDropDown = () => {\n    setIsDropDownActive(false);\n  };\n\n  const toggleCommentForm = () => {\n    setIsFormVisible(!isFormVisible);\n  };\n\n  const selectDropDownItem = (user: User, userId: number) => {\n    setSelectedUser(user);\n    setSelectedUserId(userId);\n    setIsDropDownActive(false);\n    setSelectedPost(null);\n    setComments(null);\n  };\n\n  const selectPost = (post: Post) => {\n    setSelectedPost(post);\n    if (isFormVisible) {\n      toggleCommentForm();\n    }\n  };\n\n  const deSelectPost = () => {\n    setSelectedPost(null);\n  };\n\n  const extendComments = (commentToPost: Comment) => {\n    if (!comments) {\n      setComments([commentToPost]);\n    } else {\n      setComments([...comments, commentToPost]);\n    }\n  };\n\n  const handleSetComments = (commentsToPull: Comment[]) => {\n    setComments(commentsToPull);\n  };\n\n  const deleteCommentFromState = (commendId: number) => {\n    if (comments) {\n      setComments(comments.filter(comment => comment.id !== commendId));\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => {\n        setUsers(usersFromServer);\n      })\n      .catch(() => {\n        setErrorMessage(Errors.UserApi);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoadingPosts(true);\n      setSelectedUsersPosts([]);\n      getPosts(selectedUserId)\n        .then(postsFromServer => {\n          setSelectedUsersPosts(postsFromServer);\n        })\n        .catch(() => {\n          setErrorMessage(Errors.PostApi);\n        })\n        .finally(() => {\n          setIsLoadingPosts(false);\n        });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoadingComments(true);\n\n      getComments(selectedPost.id)\n        .then(commentsFromServer => {\n          setComments(commentsFromServer);\n        })\n        .catch(() => {\n          setErrorMessage(Errors.CommentApi);\n        })\n        .finally(() => {\n          setIsLoadingComments(false);\n        });\n    }\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  isDropDownActive={isDropDownActive}\n                  toggleDropDown={toggleDropDown}\n                  selectDropDownItem={selectDropDownItem}\n                  selectedUserId={selectedUserId}\n                  closeDropDown={closeDropDown}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && <Loader />}\n\n                {errorMessage === Errors.PostApi && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {Errors.PostApi}\n                  </div>\n                )}\n\n                {selectedUser && !errorMessage && (\n                  selectedUsersPosts.length\n                    ? (\n                      <PostsList\n                        selectedUsersPosts={selectedUsersPosts}\n                        selectPost={selectPost}\n                        deSelectPost={deSelectPost}\n                        selectedPost={selectedPost}\n                      />\n                    )\n                    : (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isLoadingComments={isLoadingComments}\n                  comments={comments}\n                  selectedPost={selectedPost}\n                  ErrorMessage={errorMessage}\n                  isFormVisible={isFormVisible}\n                  toggleCommentForm={toggleCommentForm}\n                  extendComments={extendComments}\n                  deleteCommentFromState={deleteCommentFromState}\n                  handleSetComments={handleSetComments}\n                />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}